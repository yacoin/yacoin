// Copyright (c) 2009-2010 Satoshi Nakamoto
// Copyright (c) 2009-2012 The Bitcoin developers
// Distributed under the MIT/X11 software license, see the accompanying
// file COPYING or http://www.opensource.org/licenses/mit-license.php.
#ifdef _MSC_VER
    #include <stdint.h>

    #include <stdio.h>
    #include "msvc_warnings.push.h"
#else
    #ifndef BITCOIN_UTIL_H
        #include "util.h"
    #endif
#endif

#ifndef BITCOIN_TXDB_H
 #include "txdb.h"
#endif

#ifndef _BITCOINRPC_H_
 #include "bitcoinrpc.h"
#endif

#ifndef BITCOIN_INIT_H
 #include "init.h"
#endif

#include <boost/format.hpp>
#include <boost/filesystem.hpp>
#include <boost/filesystem/fstream.hpp>
#include <boost/filesystem/convenience.hpp>
#include <boost/interprocess/sync/file_lock.hpp>
#include <boost/algorithm/string/predicate.hpp>
#include <openssl/crypto.h>

#ifndef WIN32
#include <signal.h>
#endif

::int64_t
    nUpTimeStart = 0;
bool fNewerOpenSSL = false; // for key.cpp's benefit


using namespace boost;

using std::string;
using std::max;
using std::map;

CWallet* pwalletMain;
CClientUIInterface uiInterface;
std::string strWalletFileName;
bool fConfChange;
unsigned int nNodeLifespan;
unsigned int nMinerSleep;
bool fUseFastIndex;
bool fStoreBlockHashToDb;
bool fUseFastStakeMiner;
bool fUseMemoryLog;
enum Checkpoints::CPMode CheckpointsMode;

// Ping and address broadcast intervals
extern ::int64_t nPingInterval;
extern ::int64_t nBroadcastInterval;

//////////////////////////////////////////////////////////////////////////////
//
// Shutdown
//

void ExitTimeout(void* parg)
{
#ifdef WIN32
    if (fDebug)
        if (fPrintToConsole)
            printf("2 sec timeout for unknown reason!?\n");
    Sleep(2 * 1000);
#endif
}

#ifndef TESTS_ENABLED
void StartShutdown()
{
#ifdef QT_GUI
    // ensure we leave the Qt main loop for a clean GUI exit (Shutdown() is called in bitcoin.cpp afterwards)
    uiInterface.QueueShutdown();
#else
    // Without UI, Shutdown() can simply be started in a new thread
    NewThread(Shutdown, NULL);
#endif
}
static bool
    fExit;

void Shutdown(void* parg)
{
    if (fDebug)
        printf("Shutdown : In progress...\n");
    
    static CCriticalSection 
        cs_Shutdown;

    static bool 
        fTaken;

    // Make this thread recognisable as the shutdown thread
    RenameThread("yacoin-shutoff");

    bool 
        fFirstThread = false;
    {
        TRY_LOCK(cs_Shutdown, lockShutdown);
        if (lockShutdown)
        {
            fFirstThread = !fTaken;
            fTaken = true;
        }
    }
    if (fFirstThread)
    {
        fShutdown = true;
        fRequestShutdown = true;
        ++nTransactionsUpdated;
//        CTxDB().Close();
        bitdb.Flush(false);
        StopNode();
        {
            LOCK(cs_main);
            if (pwalletMain)
                pwalletMain->SetBestChain(CBlockLocator(pindexBest));
        }
        bitdb.Flush(true);
#if !defined(WIN32) && !defined(QT_GUI)
    if (fDaemon)
    {
        boost::filesystem::remove(GetPidFile());
    }
#endif
        UnregisterWallet(pwalletMain);
        if (fDebug)
            if (fPrintToConsole)
                printf("wallet unregistered\n");
        delete pwalletMain;
        NewThread(ExitTimeout, NULL);
        if (fDebug)
            if (fPrintToConsole)
                printf("exit thread started\n");
        Sleep(50);
        if (fDebug)
            printf("Yacoin exited\n\n");
        fExit = true;
#ifndef QT_GUI
        // ensure non-UI client gets exited here, but let yacoin-qt reach 'return 0;' in bitcoin.cpp
    #ifdef _MSC_VER
        return;
    #else
        exit(0);
    #endif        
#endif
    }
    else
    {
        while (!fExit)
            Sleep(500);
        Sleep(100);
        ExitThread(0);
    }
}
#endif

void HandleSIGTERM(int)
{
    fRequestShutdown = true;
}
#ifdef WIN32
//_____________________________________________________________________________
// this works for Windows gcc & MSVC++
static int WindowsHandleSigterm( unsigned long the_signal )
    {
    bool
        fIWillHandleIt = false;

    switch( the_signal )
        {
        case CTRL_C_EVENT:          //A CTRL+c signal was received,
            //either from keyboard input
            //or from a signal generated by the GenerateConsoleCtrlEvent function

        case CTRL_BREAK_EVENT:      //A CTRL+BREAK signal was received,
            //either from keyboard input
            //or from a signal generated by the GenerateConsoleCtrlEvent function

        case CTRL_LOGOFF_EVENT:     //A signal that the system sends to all console
            // processes when a user is logging off. This signal does not 
            // indicate which user is logging off, so no assumptions can be made.

        case CTRL_SHUTDOWN_EVENT:   // a system shutdown has occured
            HandleSIGTERM( ( int )the_signal );
            fIWillHandleIt = true;  // tell Windows we will take care of this
            break;      // It may not listen, but we will shutdown in any event

        case CTRL_CLOSE_EVENT:      // A signal that the system sends to all processes
            // attached to a console when the user closes
            // the console (either by choosing the Close
            // command from the console window's System menu,
            // or by choosing the End Task command from the Task List).
            HandleSIGTERM( ( int )the_signal );
            fIWillHandleIt = true;  // tell Windows we will take care of this
            // not on WIndows > XP :(
            // so can we hang here? Perhaps
            while( true )
            {
                Sleep( 1000 );
            }
            break;      // It may not listen, but we will shutdown in any event

        default:                    // any other (strange) signal we pass on
            break;                  // and just let it happen?
        }
    return fIWillHandleIt;
    }
//_____________________________________________________________________________
#endif
void HandleSIGHUP(int)
{
    fReopenDebugLog = true;
}





//////////////////////////////////////////////////////////////////////////////
//
// Start
//
#if !defined(QT_GUI) && !defined(TESTS_ENABLED)
bool AppInit(int argc, char* argv[])
{
    bool fRet = false;
    try
    {
        //
        // Parameters
        //
        // If Qt is used, parameters/bitcoin.conf are parsed in qt/bitcoin.cpp's main()
        ParseParameters(argc, argv);
        bool 
            fTest_or_Main_Net_is_decided = false;

        if (!boost::filesystem::is_directory(GetDataDir(fTest_or_Main_Net_is_decided)))
        {
            fprintf(stderr, "Error: Specified directory does not exist\n");
            Shutdown(NULL);
        }
        ReadConfigFile(mapArgs, mapMultiArgs);  // now two things have happened:
                                                // testnet/mainnet has been decided, and
                                                // the 'data directory' has been set
                                                // either by command line arguments or in
                                                // the configuration file.
                                                // this means that fTestNet should be tested 
                                                // first, before GetDataDir() is called next
                                                
                                                // this is documentation!

        if(mapArgs.count("--version") || mapArgs.count("-v"))
        {
            std::string msg = "Yacoin version: " + FormatFullVersion() + "\n\n";
            fprintf(stdout, "%s", msg.c_str());
            exit(0);
        } else if (mapArgs.count("-?") || mapArgs.count("-h") || mapArgs.count("--help"))
        {
            // First part of help message is specific to yacoind / RPC client
            std::string strUsage = _("Yacoin version") + " " + FormatFullVersion() + "\n\n" +
                _("Usage:") + "\n" +
                  "  yacoind [options]                     " + "\n" +
                  "  yacoind [options] <command> [params]  " + _("Send command to -server or yacoind") + "\n" +
                  "  yacoind [options] help                " + _("List commands") + "\n" +
                  "  yacoind [options] help <command>      " + _("Get help for a command") + "\n";

            strUsage += "\n" + HelpMessage();

            fprintf(stdout, "%s", strUsage.c_str());
#ifdef _MSC_VER
            fRet = false;
            //Shutdown(NULL);
#else            
            exit(0);
#endif
        }
        else
        {
            bool 
                fCommandLine = false;
            // Command-line RPC
            for (int i = 1; i < argc; ++i)
            {
                if (!IsSwitchChar(argv[i][0]) && !boost::algorithm::istarts_with(argv[i], "yacoin:"))
                {
                    fCommandLine = true;
                }
            }
            if (fCommandLine)
            {
                int ret = CommandLineRPC(argc, argv);
#ifdef _MSC_VER
                if( 0 == ret )  // signifies a successful RPC call
                {
                    fRet = false;
                }
#else
                exit(ret);
#endif
            }
            else
                fRet = AppInit2();
        }
    }
    catch(std::exception& e) 
    {
        PrintException(&e, "AppInit()");
    } 
    catch(...)
    {
        PrintException(NULL, "AppInit()");
    }
    if (!fRet)
        Shutdown(NULL);
    return fRet;
}

extern void noui_connect();
int main(int argc, char* argv[])
{
    bool fRet = false;

    nUpTimeStart = GetTime();
    // Connect yacoind signal handlers
    noui_connect();

    fRet = AppInit(argc, argv);

    if (fRet)
        return 0;

    return 1;
}
#endif

bool static InitError(const std::string &str)
{
    uiInterface.ThreadSafeMessageBox(str, _("Yacoin"), CClientUIInterface::OK | CClientUIInterface::MODAL);
    return false;
}

bool static InitWarning(const std::string &str)
{
    uiInterface.ThreadSafeMessageBox(str, _("Yacoin"), CClientUIInterface::OK | CClientUIInterface::ICON_EXCLAMATION | CClientUIInterface::MODAL);
    return true;
}


bool static Bind(const CService &addr, bool fError = true) 
{
    if (IsLimited(addr))
        return false;

    std::string 
        strError;

    if (!BindListenPort(addr, strError)) 
    {
        if (fError)
            return InitError(strError);
        return false;
    }
    return true;
}

// Core-specific options shared between UI and daemon
std::string HelpMessage()
{
    string strUsage = _("Options:") + "\n" +
        "  -?                     " + _("This help message") + "\n" +
        "  -v                     " + _("Yacoin version") + "\n" +
        "  -conf=<file>           " + _("Specify configuration file (default: yacoin.conf)") + "\n" +
        "  -pid=<file>            " + _("Specify pid file (default: yacoind.pid)") + "\n" +
        "  -datadir=<dir>         " + _("Specify data directory") + "\n" +
        "  -wallet=<file>         " + _("Specify wallet file (within data directory)") + "\n" +
        "  -dbcache=<n>           " + _("Set database cache size in megabytes (default: 25)") + "\n" +
        "  -dblogsize=<n>         " + _("Set database disk log size in megabytes (default: 100)") + "\n" +
        "  -timeout=<n>           " + _("Specify connection timeout in milliseconds (default: 5000)") + "\n" +
        "  -proxy=<ip:port>       " + _("Connect through socks proxy") + "\n" +
        "  -socks=<n>             " + _("Select the version of socks proxy to use (4-5, default: 5)") + "\n" +
        "  -tor=<ip:port>         " + _("Use proxy to reach tor hidden services (default: same as -proxy)") + "\n"
        "  -torname=<host.onion>  " + _("Send the specified hidden service name when connecting to Tor nodes (default: none)") + "\n"
        "  -dns                   " + _("Allow DNS lookups for -addnode, -seednode and -connect") + "\n" +
        "  -maxconnections=<n>    " + _("Maintain at most <n> connections to peers (default: 125)") + "\n" +
        "  -addnode=<ip>          " + _("Add a node to connect to and attempt to keep the connection open") + "\n" +
        "  -connect=<ip>          " + _("Connect only to the specified node(s)") + "\n" +
        "  -seednode=<ip>         " + _("Connect to a node to retrieve peer addresses, and disconnect") + "\n" +
        "  -externalip=<ip>       " + _("Specify your own public address") + "\n" +
        "  -onlynet=<net>         " + _("Only connect to nodes in network <net> (IPv4, IPv6 or Tor)") + "\n" +
        "  -discover              " + _("Discover own IP address (default: 1 when listening and no -externalip)") + "\n" +
        "  -irc                   " + _("Find peers using internet relay chat (default: 1)") + "\n" +
        "  -listen                " + _("Accept connections from outside (default: 1 if no -proxy or -connect)") + "\n" +
        "  -bind=<addr>           " + _("Bind to given address. Use [host]:port notation for IPv6") + "\n" +
        "  -dnsseed               " + _("Find peers using DNS lookup (default: 1)") + "\n" +
        "  -cppolicy              " + _("Sync checkpoints policy (default: strict)") + "\n" +
        "  -banscore=<n>          " + _("Threshold for disconnecting misbehaving peers (default: 100)") + "\n" +
        "  -bantime=<n>           " + _("Number of seconds to keep misbehaving peers from reconnecting (default: 86400)") + "\n" +
        "  -maxreceivebuffer=<n>  " + _("Maximum per-connection receive buffer, <n>*1000 bytes (default: 5000)") + "\n" +
        "  -maxsendbuffer=<n>     " + _("Maximum per-connection send buffer, <n>*1000 bytes (default: 1000)") + "\n" +
#ifdef USE_UPNP
#if USE_UPNP
        "  -upnp                  " + _("Use UPnP to map the listening port (default: 1 when listening)") + "\n" +
#else
        "  -upnp                  " + _("Use UPnP to map the listening port (default: 0)") + "\n" +
#endif
#endif
        "  -detachdb              " + _("Detach block and address databases. Increases shutdown time (default: 0)") + "\n" +

#ifdef DB_LOG_IN_MEMORY
        "  -memorylog             " + _("Use in-memory logging for block index database (default: 1)") + "\n" +
#endif

        "  -paytxfee=<amt>        " + _("Fee per KB to add to transactions you send") + "\n" +
        "  -mininput=<amt>        " + str(boost::format(_("When creating transactions, ignore inputs with value less than this (default: %s)")) % FormatMoney(MIN_TXOUT_AMOUNT)) + "\n" +
#ifdef QT_GUI
        "  -server                " + _("Accept command line and JSON-RPC commands") + "\n" +
#endif
#if !defined(WIN32) && !defined(QT_GUI)
        "  -daemon                " + _("Run in the background as a daemon and accept commands") + "\n" +
#endif
        "  -testnet               " + _("Use the test network") + "\n" +
        "  -testnetNewLogic       " + _("Use the test network New Logic") + "\n" +
        "  -testnetnewlogicblocknumber=<number> " + _("New Logic starting at block = <number>") + "\n" +
        "  -debug                 " + _("Output extra debugging information. Implies all other -debug* options") + "\n" +
        "  -debugnet              " + _("Output extra network debugging information") + "\n" +
        "  -logtimestamps         " + _("Prepend debug output with timestamp") + "\n" +
        "  -shrinkdebugfile       " + _("Shrink debug.log file on client startup (default: 1 when no -debug)") + "\n" +
        "  -printtoconsole        " + _("Send trace/debug info to console instead of debug.log file") + "\n" +
#ifdef WIN32
        "  -printtodebugger       " + _("Send trace/debug info to debugger") + "\n" +
#endif
        "  -btcyacprovider        " + _("Add a BTC to YAC price provider, entered as") + "\n" +
        "                         domain,key,argument,offset,port" + "\n" 
        "                         For example: where the url is" + "\n"
        "                         http://pubapi2.cryptsy.com/api.php?method=singlemarketdata&marketid=11" + "\n"
        "                         one would enter" + "\n"
        "                         pubapi2.cryptsy.com,lasttradeprice,/api.php?method=singlemarketdata&marketid=11,3,80" + "\n"
        "                         see https://www.cryptsy.com/pages/publicapi" + "\n" +
        "  -usdbtcprovider        " + _("Add a USD to BTC price provider, entered as") + "\n" +
        "                         domain,key,argument,offset" + "\n" +
        "                         For example: where the url is" + "\n" +
        "                         http://pubapi2.cryptsy.com/api.php?method=singlemarketdata&marketid=2" + "\n" +
        "                         one would enter" + "\n" +
        "                         pubapi2.cryptsy.com,lastdata,/api.php?method=singlemarketdata&marketid=2,3,80" + "\n" +
        "                         see https://www.cryptsy.com/pages/publicapi" + "\n" +
        "  -rpcuser=<user>        " + _("Username for JSON-RPC connections") + "\n" +
        "  -rpcpassword=<pw>      " + _("Password for JSON-RPC connections") + "\n" +
        "  -port=<port>           " + _("Listen for connections on <port> (default: 7688 or testnet: 17688)") + "\n" +
        "  -rpcport=<port>        " + _("Listen for JSON-RPC connections on <port> (default: 7687 or testnet: 17687)") + "\n" +
        "  -rpcallowip=<ip>       " + _("Allow JSON-RPC connections from specified IP address") + "\n" +
        "  -rpcconnect=<ip>       " + _("Send commands to node running on <ip> (default: 127.0.0.1)") + "\n" +
        "  -blocknotify=<cmd>     " + _("Execute command when the best block changes (%s in cmd is replaced by block hash)") + "\n" +
        "  -walletnotify=<cmd>    " + _("Execute command when a wallet transaction changes (%s in cmd is replaced by TxID)") + "\n" +
        "  -confchange            " + _("Require a confirmations for change (default: 0)") + "\n" +
        "  -upgradewallet         " + _("Upgrade wallet to latest format") + "\n" +
        "  -keypool=<n>           " + _("Set key pool size to <n> (default: 100)") + "\n" +
        "  -rescan                " + _("Rescan the block chain for missing wallet transactions") + "\n" +
        "  -salvagewallet         " + _("Attempt to recover private keys from a corrupt wallet.dat") + "\n" +
        "  -checkblocks=<n>       " + _("How many blocks to check at startup (default: 750, 0 = all)") + "\n" +
        "  -checklevel=<n>        " + _("How thorough the block verification is (0-6, default: 1)") + "\n" +
        "  -par=N                 " + _("Set the number of script verification threads (1-16, 0=auto, default: 0)") + "\n" +
        "  -loadblock=<file>      " + _("Imports blocks from external blk000?.dat file") + "\n" +
                                        "\n" + _("SSL options: (see the Bitcoin Wiki for SSL setup instructions)") + "\n" +
        "  -rpcssl                                  " + _("Use OpenSSL (https) for JSON-RPC connections") + "\n" +
        "  -rpcsslcertificatechainfile=<file.cert>  " + _("Server certificate file (default: server.cert)") + "\n" +
        "  -rpcsslprivatekeyfile=<file.pem>         " + _("Server private key (default: server.pem)") + "\n" +
        "  -rpcsslciphers=<ciphers>                 " + _("Acceptable ciphers (default: TLSv1+HIGH:!SSLv2:!aNULL:!eNULL:!AH:!3DES:@STRENGTH)") + "\n";

    return strUsage;
}

//_____________________________________________________________________________

/** Initialize bitcoin.
 *  @pre Parameters should be parsed and config file should be read.
 */
bool AppInit2()
{
    // ********************************************************* Step 1: setup
#ifdef _MSC_VER
    // Turn off Microsoft heap dump noise
    _CrtSetReportMode(_CRT_WARN, _CRTDBG_MODE_FILE);
    _CrtSetReportFile(_CRT_WARN, CreateFileA("NUL", GENERIC_WRITE, 0, NULL, OPEN_EXISTING, 0, 0));
#endif
#if _MSC_VER >= 1400
    // Disable confusing "helpful" text message on abort, Ctrl-C
    _set_abort_behavior(0, _WRITE_ABORT_MSG | _CALL_REPORTFAULT);
#endif
#ifdef WIN32
    // Enable Data Execution Prevention (DEP)
    // Minimum supported OS versions: WinXP SP3, WinVista >= SP1, Win Server 2008
    // A failure is non-critical and needs no further attention!
#ifndef PROCESS_DEP_ENABLE
// We define this here, because GCCs winbase.h limits this to _WIN32_WINNT >= 0x0601 (Windows 7),
// which is not correct. Can be removed, when GCCs winbase.h is fixed!
#define PROCESS_DEP_ENABLE 0x00000001
#endif
    typedef BOOL (WINAPI *PSETPROCDEPPOL)(DWORD);
    PSETPROCDEPPOL setProcDEPPol = (PSETPROCDEPPOL)GetProcAddress(GetModuleHandleA("Kernel32.dll"), "SetProcessDEPPolicy");
    if (setProcDEPPol != NULL) setProcDEPPol(PROCESS_DEP_ENABLE);
#endif
#ifndef WIN32
    umask(077);

    // Clean shutdown on SIGTERM
    struct sigaction sa;
    sa.sa_handler = HandleSIGTERM;
    sigemptyset(&sa.sa_mask);
    sa.sa_flags = 0;
    sigaction(SIGTERM, &sa, NULL);
    sigaction(SIGINT, &sa, NULL);

    // Reopen debug.log on SIGHUP
    struct sigaction sa_hup;
    sa_hup.sa_handler = HandleSIGHUP;
    sigemptyset(&sa_hup.sa_mask);
    sa_hup.sa_flags = 0;
    sigaction(SIGHUP, &sa_hup, NULL);
#else
    // what do we do for windows aborts or Ctl-Cs, etc.?
    bool
        fWeShouldBeConcerned = true;
        
    if( SetConsoleCtrlHandler( ( PHANDLER_ROUTINE )&WindowsHandleSigterm, true ) )
        fWeShouldBeConcerned = false;    // success
    else                        //exigency of wincon.h
    {    //    // we failed!
        (void)printf(
                    "\n"
                    "Windows CCH failed?"
                    "\n"
                    ""
                    );
    }
#endif

    // ********************************************************* Step 2: parameter interactions

    nNodeLifespan = (unsigned int)(GetArg("-addrlifespan", 7));
    fUseFastIndex = GetBoolArg("-fastindex", true);
    fStoreBlockHashToDb = GetBoolArg("-storeblockhash", true);
    fUseMemoryLog = GetBoolArg("-memorylog", true);
    nMinerSleep = (unsigned int)(GetArg("-minersleep", nOneHundredMilliseconds));

    // Ping and address broadcast intervals
    nPingInterval = max< ::int64_t>(10 * 60, GetArg("-keepalive", 30 * 60));

    nBroadcastInterval = max< ::int64_t>(6 * 60 * 60, GetArg("-addrsetlifetime", 24 * 60 * 60));

    CheckpointsMode = Checkpoints::STRICT_;
    std::string strCpMode = GetArg("-cppolicy", "strict");

    if(strCpMode == "strict") {
        CheckpointsMode = Checkpoints::STRICT_;
    }

    if(strCpMode == "advisory") {
        CheckpointsMode = Checkpoints::ADVISORY;
    }

    if(strCpMode == "permissive") {
        CheckpointsMode = Checkpoints::PERMISSIVE;
    }

#ifndef Yac1dot0
    return InitError( _("This must be compiled for Yac1.0.") );
#endif

    // Good that testnet is tested here, but closer to AppInit() => ReadConfigFile() would be better
    fTestNet = GetBoolArg("-testnet");
    // now the program is definitively running MainNet or TestNet.
    if (fTestNet)
    {
        SoftSetBoolArg("-irc", true);
    }
    // else    // not Test Net
    // {
    //     return InitError( _("Yac1.0 must be set for testNet.") );
    // }

    if (mapArgs.count("-bind")) {
        // when specifying an explicit binding address, you want to listen on it
        // even when -connect or -proxy is specified
        SoftSetBoolArg("-listen", true);
    }

    if (mapArgs.count("-connect") && mapMultiArgs["-connect"].size() > 0) {
        // when only connecting to trusted nodes, do not seed via DNS, or listen by default
        SoftSetBoolArg("-dnsseed", false);
        SoftSetBoolArg("-listen", false);
    }

    if (mapArgs.count("-proxy")) {
        // to protect privacy, do not listen by default if a proxy server is specified
        SoftSetBoolArg("-listen", false);
    }

    if (!GetBoolArg("-listen", true)) {
        // do not map ports or try to retrieve public IP when not listening (pointless)
        SoftSetBoolArg("-upnp", false);
        SoftSetBoolArg("-discover", false);
    }

    if (mapArgs.count("-externalip")) {
        // if an explicit public IP is specified, do not try to find others
        SoftSetBoolArg("-discover", false);
    }

    if (GetBoolArg("-salvagewallet")) {
        // Rewrite just private keys: rescan to find transactions
        SoftSetBoolArg("-rescan", true);
    }

    // ********************************************************* Step 3: parameter-to-internal-flags

    // -par=0 means autodetect, but nScriptCheckThreads==0 means no concurrency
    nScriptCheckThreads = (int)(GetArg("-par", 0));
    if (nScriptCheckThreads == 0)
        nScriptCheckThreads = boost::thread::hardware_concurrency();
    if (nScriptCheckThreads <= 1) 
        nScriptCheckThreads = 0;
    else if (nScriptCheckThreads > MAX_SCRIPTCHECK_THREADS)
        nScriptCheckThreads = MAX_SCRIPTCHECK_THREADS;

    fDebug = GetBoolArg("-debug");

    // -debug implies fDebug*
    if (fDebug)
        fDebugNet = true;
    else
        fDebugNet = GetBoolArg("-debugnet");

    fTestNetNewLogic = GetBoolArg("-testnetNewLogic");

    bitdb.SetDetach(GetBoolArg("-detachdb", false));

#if !defined(WIN32) && !defined(QT_GUI)
    fDaemon = GetBoolArg("-daemon");
#else
    fDaemon = false;
#endif

    if (fDaemon)
        fServer = true;
    else
        fServer = GetBoolArg("-server");

    /* force fServer when running without GUI */
#if !defined(QT_GUI)
    fServer = true;
    fPrintToConsole = GetBoolArg("-printtoconsole");
#else
    fPrintToConsole = false;
#endif
    fPrintToDebugger = GetBoolArg("-printtodebugger");
    fLogTimestamps = GetBoolArg("-logtimestamps");

    nEpochInterval = (::uint32_t)(GetArg("-epochinterval", 21000));
    nDifficultyInterval = nEpochInterval;

    if (mapArgs.count("-timeout"))
    {
        int nNewTimeout = (int)(GetArg("-timeout", 5000));
        if (nNewTimeout > 0 && nNewTimeout < 600000)
            nConnectTimeout = nNewTimeout;
    }

    // Continue to put "/P2SH/" in the coinbase to monitor
    // BIP16 support.
    // This can be removed eventually...
    const char* pszP2SH = "/P2SH/";
    COINBASE_FLAGS << std::vector<unsigned char>(pszP2SH, pszP2SH+strlen(pszP2SH));


    if (mapArgs.count("-paytxfee"))
    {
        if (!ParseMoney(mapArgs["-paytxfee"], nTransactionFee))
            return InitError(strprintf(_("Invalid amount for -paytxfee=<amount>: '%s'"), mapArgs["-paytxfee"].c_str()));
        if (nTransactionFee > 0.25 * COIN)
            InitWarning(_("Warning: -paytxfee is set very high! This is the transaction fee you will pay if you send a transaction."));
    }

    fConfChange = GetBoolArg("-confchange", false);

    if (mapArgs.count("-mininput"))
    {
        if (!ParseMoney(mapArgs["-mininput"], nMinimumInputValue))
            return InitError(strprintf(_("Invalid amount for -mininput=<amount>: '%s'"), mapArgs["-mininput"].c_str()));
    }

    // ********************************************************* Step 4: application initialization: dir lock, daemonize, pidfile, debug log

    std::string // note fTestNet has been set and finally we 'discover' the 'data directory'!
        strDataDir = GetDataDir().string();

    strWalletFileName = GetArg("-wallet", "wallet.dat");

    // strWalletFileName must be a plain filename without a directory
    if (
        strWalletFileName != 
        boost::filesystem::basename(strWalletFileName) + 
        boost::filesystem::extension(strWalletFileName)
       )
        return InitError(
                         strprintf(
                            _("Wallet %s resides outside data directory %s."), 
                            strWalletFileName.c_str(), 
                            strDataDir.c_str()
                                  )
                        );

    // Make sure only a single Bitcoin process is using the data directory.
    boost::filesystem::path 
        pathLockFile = GetDataDir() / ".lock";

    FILE
        * file = fopen(pathLockFile.string().c_str(), "a"); // empty lock file; created if it doesn't exist.

    if (file)         
        fclose(file);

    static boost::interprocess::file_lock 
        lock(pathLockFile.string().c_str());

    if (!lock.try_lock())
        return InitError(
                         strprintf(
                            _("Cannot obtain a lock on data directory %s.  Yacoin is probably already running."), 
                            strDataDir.c_str()
                                  )
                        );

#if !defined(WIN32) && !defined(QT_GUI)
    if (fDaemon)
    {
        // Daemonize
        pid_t pid = fork();
        if (pid < 0)
        {
            fprintf(stderr, "Error: fork() returned %d errno %d\n", pid, errno);
            return false;
        }
        if (pid > 0)
        {
            CreatePidFile(GetPidFile(), pid);
            return true;
        }

        pid_t sid = setsid();
        if (sid < 0)
            fprintf(stderr, "Error: setsid() returned %d errno %d\n", sid, errno);
    }
#endif

    if (GetBoolArg("-shrinkdebugfile", !fDebug))
        ShrinkDebugFile();
    printf("\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n");
    printf("Yacoin version %s (%s)\n", FormatFullVersion().c_str(), CLIENT_DATE.c_str());

    if (fDebug)
    {
        (void)printf( "new logic flag is %s\n", fTestNetNewLogic? "true": "false" );
    }
    printf("\n" );

//    if (fDebug)
    {
#if defined( USE_IPV6 )
        (void)printf( "USE_IPV6 is defined\n" );
#endif
#if defined( USE_ASM )
        (void)printf( "USE_ASM is defined\n" );
#endif
#if defined( USE_UPNP )
        (void)printf( "USE_UPNP is defined\n" );
#endif
#if defined( USE_LEVELDB )
        (void)printf( "USE_LEVELDB is defined\n" );
#endif
    }
    printf("Using Boost version %1d.%d.%d\n",         // miiill (most, insignificant, least) digits
            BOOST_VERSION / 100000,
            (BOOST_VERSION / 100) % 1000,
            BOOST_VERSION % 100
          );
#ifdef _MSC_VER
    printf("Using Boost MSVC version %d\n", BOOST_MSVC );
    printf("Using Boost MSVC full version %d.%d build %d\n",        // VVM MPP PPP
            BOOST_MSVC_FULL_VER / 10000000,
            ( BOOST_MSVC_FULL_VER / 100000 ) % 100,
            BOOST_MSVC_FULL_VER % 100000
          );
#endif

#ifdef BOOST_GCC
    //Has the value: __GNUC__ * 10000 + 
    //               __GNUC_MINOR__ * 100 + 
    //               __GNUC_PATCHLEVEL__

    printf("Using Boost GCC full version %d.2d build %d\n",        //AAIIpp
            // __GNUC__,
            BOOST_GCC / 10000,

            // __GNUC_MINOR__,
            ( BOOST_GCC / 100 ) % 100,

            //__GNUC_PATCHLEVEL__
            BOOST_GCC % 100
          );
#endif

#ifdef BOOST_WINDOWS
    printf("Windows platform is available to Boost\n" );
#endif

#ifdef _MSC_VER
    #ifdef _DEBUG
        printf("Boost is using the %s compiler\n", BOOST_COMPILER );
        printf("Boost is using the %s standard library\n", BOOST_STDLIB );
        printf("Boost is using the %s platform\n", BOOST_PLATFORM );
    #endif
#else
    printf("Boost is using the %s compiler\n", BOOST_COMPILER );
    printf("Boost is using the %s standard library\n", BOOST_STDLIB );
    printf("Boost is using the %s platform\n", BOOST_PLATFORM );
#endif
    printf("\n" );

#ifdef USE_LEVELDB
    printf(
            "\n"
            "Using levelDB version %d.%d"
            "\n"
            "", 
            leveldb::kMajorVersion,
            leveldb::kMinorVersion
          );
    printf("\n");
#endif

    int
        nBdbMajor,
        nBdbMinor,
        nBdbPatch;

    (void)db_version( &nBdbMajor, &nBdbMinor, &nBdbPatch );
    (void)printf("Using BerkeleyDB version %d.%d.%d\n", 
                nBdbMajor,
                nBdbMinor,
                nBdbPatch
                );
    printf("\n");

    printf("Using OpenSSL version %s\n", SSLeay_version(SSLEAY_VERSION));

    if (fDebug)
    {
    #ifdef WIN32
        (void)printf(
                     "\n"
                     "wallet is \n"
                     "\"%s\""
                     "\n"
                     , (strDataDir + "/" + strWalletFileName).c_str()
                    );
    #endif
    }

    unsigned int
        nCutoffVersion = (unsigned int)((int)'j' - (int)'`'),
        nV = SSLEAY_VERSION_NUMBER;
    nV &= 0x000000f0;
    nV >>= 4;
    if( nV > nCutoffVersion )
        fNewerOpenSSL = true;

    if (!fLogTimestamps)
        printf("Startup time: %s\n", DateTimeStrFormat("%x %H:%M:%S", GetTime()).c_str());
    printf("The Default data directory is %s\n", GetDefaultDataDir().string().c_str());
    printf("Using data directory %s\n", strDataDir.c_str());
    std::ostringstream 
        strErrors;

    if (fDaemon)
        fprintf(stdout, "Yacoin server starting\n");

    if (nScriptCheckThreads) 
    {
        printf("Using %u threads for script verification\n", nScriptCheckThreads);
        for (int i=0; i<nScriptCheckThreads-1; ++i)
            NewThread(ThreadScriptCheck, NULL);
    }

    ::int64_t nStart;

    // ********************************************************* Step 5: verify database integrity

    uiInterface.InitMessage(_("<b>Verifying database integrity...</b>"));

    if (!bitdb.Open(GetDataDir()))
    {
        string msg = strprintf(_("Error initializing database environment %s!"
                                 " To recover, BACKUP THAT DIRECTORY, then remove"
                                 " everything from it except for wallet.dat."), strDataDir.c_str());
        return InitError(msg);
    }

    if (GetBoolArg("-salvagewallet"))
    {
        // Recover readable keypairs:
        if (!CWalletDB::Recover(bitdb, strWalletFileName, true))
            return false;
    }

    if (filesystem::exists(GetDataDir() / strWalletFileName))
    {
        CDBEnv::VerifyResult r = bitdb.Verify(strWalletFileName, CWalletDB::Recover);
        if (r == CDBEnv::RECOVER_OK)
        {
            string msg = strprintf(_("Warning: wallet.dat corrupt, data salvaged!"
                                     " Original wallet.dat saved as wallet.{timestamp}.bak in %s; if"
                                     " your balance or transactions are incorrect you should"
                                     " restore from a backup."), strDataDir.c_str());
            uiInterface.ThreadSafeMessageBox(msg, _("Yacoin"), CClientUIInterface::OK | CClientUIInterface::ICON_EXCLAMATION | CClientUIInterface::MODAL);
        }
        if (r == CDBEnv::RECOVER_FAIL)
            return InitError(_("wallet.dat corrupt, salvage failed"));
    }

    // ********************************************************* Step 6: network initialization

    int nSocksVersion = (int)(GetArg("-socks", 5));

#ifdef WIN32
    // Initialize Windows Sockets
    WSADATA 
        wsadata;

    int 
        ret = WSAStartup(MAKEWORD(2,2), &wsadata);

    if (ret != NO_ERROR)
    {
        string
            strError = strprintf(
                                 "Error: TCP/IP socket library failed to start "
                                 "(WSAStartup returned error %d)", 
                                 ret
                                );
        printf("%s\n", strError.c_str());
    }
    if (
        (2 != LOBYTE( wsadata.wVersion )) ||
        (2 != HIBYTE( wsadata.wVersion ))
       ) 
    {
    /* Tell the user that we could not find a usable */
    /* WinSock DLL.                                  */
    WSACleanup( );
    string
        strError = "Error: TCP/IP socket library isn't 2.2 or greater?";
    printf("%s\n", strError.c_str());
    return InitError(_("Error: TCP/IP socket library isn't 2.2 or greater?"));
    }

#endif
    if (nSocksVersion != 4 && nSocksVersion != 5)
        return InitError(strprintf(_("Unknown -socks proxy version requested: %i"), nSocksVersion));

    if (mapArgs.count("-onlynet")) {
        std::set<enum Network> nets;
        BOOST_FOREACH(std::string snet, mapMultiArgs["-onlynet"]) {
            enum Network net = ParseNetwork(snet);
            if (net == NET_UNROUTABLE)
                return InitError(strprintf(_("Unknown network specified in -onlynet: '%s'"), snet.c_str()));
            nets.insert(net);
        }
        for (int n = 0; n < NET_MAX; n++) {
            enum Network net = (enum Network)n;
            if (!nets.count(net))
                SetLimited(net);
        }
    }
#if defined(USE_IPV6)
#if ! USE_IPV6
    else
        SetLimited(NET_IPV6);
#endif
#endif

    CService addrProxy;
    bool fProxy = false;
    if (mapArgs.count("-proxy"))
    {
        addrProxy = CService(mapArgs["-proxy"], 9050);
        if (!addrProxy.IsValid())
            return InitError(strprintf(_("Invalid -proxy address: '%s'"), mapArgs["-proxy"].c_str()));

        if (!IsLimited(NET_IPV4))
            SetProxy(NET_IPV4, addrProxy, nSocksVersion);
        if (nSocksVersion > 4) {
#ifdef USE_IPV6
            if (!IsLimited(NET_IPV6))
                SetProxy(NET_IPV6, addrProxy, nSocksVersion);
#endif
            SetNameProxy(addrProxy, nSocksVersion);
        }
        fProxy = true;
    }

    // -tor can override normal proxy, -notor disables tor entirely
    if (!(mapArgs.count("-tor") && mapArgs["-tor"] == "0") && (fProxy || mapArgs.count("-tor"))) {
        CService addrOnion;
        if (!mapArgs.count("-tor"))
            addrOnion = addrProxy;
        else
            addrOnion = CService(mapArgs["-tor"], 9050);
        if (!addrOnion.IsValid())
            return InitError(strprintf(_("Invalid -tor address: '%s'"), mapArgs["-tor"].c_str()));
        SetProxy(NET_TOR, addrOnion, 5);
        SetReachable(NET_TOR);
    }

    // see Step 2: parameter interactions for more information about these
    if (!IsLimited(NET_IPV4) || !IsLimited(NET_IPV6))
    {
        fNoListen = !GetBoolArg("-listen", true);
        fDiscover = GetBoolArg("-discover", true);
        fNameLookup = GetBoolArg("-dns", true);
#ifdef USE_UPNP
        fUseUPnP = GetBoolArg("-upnp", USE_UPNP);
#endif
    } 
    else 
    {
        // Don't listen, discover addresses or search for nodes if IPv4 and IPv6 networking is disabled.
        fNoListen = true;
        fDiscover = fNameLookup = fUseUPnP = false;
        SoftSetBoolArg("-irc", false);
        SoftSetBoolArg("-dnsseed", false);
        printf(
               "strange ini path?\n"
              );
    }

    bool fBound = false;
    if (!fNoListen)
    {
        std::string strError;
        if (mapArgs.count("-bind")) 
        {
            BOOST_FOREACH(std::string strBind, mapMultiArgs["-bind"]) 
            {
                CService addrBind;
                if (!Lookup(strBind.c_str(), addrBind, GetListenPort(), false))
                    return InitError(
                                strprintf(
                                          _("Cannot resolve -bind address: '%s'"), 
                                          strBind.c_str()
                                         )
                                    );
                fBound |= Bind(addrBind);
            }
        } else {
            struct in_addr inaddr_any;
            inaddr_any.s_addr = INADDR_ANY;
#ifdef USE_IPV6
            if (!IsLimited(NET_IPV6))
                fBound |= Bind(CService(in6addr_any, GetListenPort()), false);
#endif
            if (!IsLimited(NET_IPV4))
                fBound |= Bind(CService(inaddr_any, GetListenPort()), !fBound);

        }
        if (!fBound)
            return InitError(_("Failed to listen on any port. Use -listen=0 if you want this."));
    }

    // If Tor is reachable then listen on loopback interface,
    //    to allow allow other users reach you through the hidden service
    if (!IsLimited(NET_TOR) && mapArgs.count("-torname")) 
    {
        std::string strError;
        struct in_addr inaddr_loopback;
        inaddr_loopback.s_addr = htonl(INADDR_LOOPBACK);

#ifdef USE_IPV6
        if (!BindListenPort(CService(in6addr_loopback, GetListenPort()), strError))
            return InitError(strError);
#endif
        if (!BindListenPort(CService(inaddr_loopback, GetListenPort()), strError))
            return InitError(strError);
    }

    if (mapArgs.count("-externalip"))
    {
        BOOST_FOREACH(string strAddr, mapMultiArgs["-externalip"]) {
            CService addrLocal(strAddr, GetListenPort(), fNameLookup);
            if (!addrLocal.IsValid())
                return InitError(strprintf(_("Cannot resolve -externalip address: '%s'"), strAddr.c_str()));
            AddLocal(CService(strAddr, GetListenPort(), fNameLookup), LOCAL_MANUAL);
        }
    }

    if (mapArgs.count("-reservebalance")) // ppcoin: reserve balance amount
    {
        ::int64_t nReserveBalance = 0;
        if (!ParseMoney(mapArgs["-reservebalance"], nReserveBalance))
        {
            InitError(_("Invalid amount for -reservebalance=<amount>"));
            return false;
        }
    }

    if (mapArgs.count("-checkpointkey")) // ppcoin: checkpoint master priv key
    {
        if (!Checkpoints::SetCheckpointPrivKey(GetArg("-checkpointkey", "")))
            InitError(_("Unable to sign checkpoint, wrong checkpointkey?\n"));
    }

    BOOST_FOREACH(string strDest, mapMultiArgs["-seednode"])
        AddOneShot(strDest);

//test for https, before loading block index, so as to test with fast turn around
// until done, then remove
//#ifdef _DEBUG
//    do_https_test();
//#endif
    //fRequestShutdown = true;

    // ********************************************************* Step 7 was Step 8: load wallet

    uiInterface.InitMessage(_("<b>Loading wallet...</b>"));
    printf("Loading wallet...\n");
    nStart = GetTimeMillis();
    bool fFirstRun = true;
    pwalletMain = new CWallet(strWalletFileName);
    DBErrors nLoadWalletRet = pwalletMain->LoadWallet(fFirstRun);
    if (nLoadWalletRet != DB_LOAD_OK)
    {
        if (nLoadWalletRet == DB_CORRUPT)
            strErrors << _("Error loading wallet.dat: Wallet corrupted") << "\n";
        else if (nLoadWalletRet == DB_NONCRITICAL_ERROR)
        {
            string msg(_("Warning: error reading wallet.dat! All keys read correctly, but transaction data"
                         " or address book entries might be missing or incorrect."));
            uiInterface.ThreadSafeMessageBox(msg, _("Yacoin"), CClientUIInterface::OK | CClientUIInterface::ICON_EXCLAMATION | CClientUIInterface::MODAL);
        }
        else if (nLoadWalletRet == DB_TOO_NEW)
            strErrors << _("Error loading wallet.dat: Wallet requires newer version of Yacoin") << "\n";
        else if (nLoadWalletRet == DB_NEED_REWRITE)
        {
            strErrors << _("Wallet needed to be rewritten: restart Yacoin to complete") << "\n";
            printf("%s", strErrors.str().c_str());
            return InitError(strErrors.str());
        }
        else
            strErrors << _("Error loading wallet.dat") << "\n";
    }

    if (GetBoolArg("-upgradewallet", fFirstRun))
    {
        int nMaxVersion = (int)(GetArg("-upgradewallet", 0));
        if (nMaxVersion == 0) // the -upgradewallet without argument case
        {
            printf("Performing wallet upgrade to %i\n", FEATURE_LATEST);
            nMaxVersion = CLIENT_VERSION;
            pwalletMain->SetMinVersion(FEATURE_LATEST); // permanently upgrade the wallet immediately
        }
        else
            printf("Allowing wallet upgrade up to %i\n", nMaxVersion);
        if (nMaxVersion < pwalletMain->GetVersion())
            strErrors << _("Cannot downgrade wallet") << "\n";
        pwalletMain->SetMaxVersion(nMaxVersion);
    }
    // ********************************************************* Step 8 was Step 7: load blockchain

    if (!bitdb.Open(GetDataDir()))
    {
        string msg = strprintf(_("Error initializing database environment %s!"
                                 " To recover, BACKUP THAT DIRECTORY, then remove"
                                 " everything from it except for wallet.dat."), strDataDir.c_str());
        return InitError(msg);
    }

    if (GetBoolArg("-loadblockindextest"))
    {
        CTxDB txdb("r");
        txdb.LoadBlockIndex();
        PrintBlockTree();
        return false;
    }


    nMainnetNewLogicBlockNumber = GetArg("-testnetNewLogicBlockNumber", 1890000);
    nTestNetNewLogicBlockNumber = GetArg("-testnetNewLogicBlockNumber", 0);
    printf("Param nMainnetNewLogicBlockNumber = %d\n",nMainnetNewLogicBlockNumber);
    printf("Param testnetNewLogicBlockNumber = %d\n",nTestNetNewLogicBlockNumber);

    MAXIMUM_YAC1DOT0_N_FACTOR = GetArg("-nFactorAtHardfork", 21);
    printf("Param nFactorAtHardfork = %d\n", MAXIMUM_YAC1DOT0_N_FACTOR);

    printf("Loading block index...\n");
    bool fLoaded = false;
    while (!fLoaded) 
    {
        std::string 
            strLoadError;
        // YACOIN TODO ADD SPINNER OR PROGRESS BAR
        uiInterface.InitMessage(_("<b>Loading block index, this may take several minutes...</b>"));

        nStart = GetTimeMillis();
        do 
        {
            try 
            {
                UnloadBlockIndex();

                if (!LoadBlockIndex()) 
                {
                    strLoadError = _("Error loading block database");
                    break;
                }
            } 
            catch(std::exception &e) 
            {
                (void)e;
                strLoadError = _("Error opening block database");
                break;
            }
            fLoaded = true;
        }
        while(false);

        if (!fLoaded) 
        {   // TODO: suggest reindex here
            return InitError(strLoadError);
        }
    }

    // as LoadBlockIndex can take several minutes, it's possible the user
    // requested to kill bitcoin-qt during the last operation. If so, exit.
    // As the program has not fully started yet, Shutdown() is possibly overkill.
    if (fRequestShutdown)
    {
        printf("Shutdown requested. Exiting.\n");
        return false;
    }
    printf(" block index %15" PRId64 "ms\n", GetTimeMillis() - nStart);

    if (fDebug)
    {
#ifdef WIN32
        (void)printf(
                     "\n"
                     "nMainnetNewLogicBlockNumber is \n"
                     "%d"
                     "\n"
                     , nMainnetNewLogicBlockNumber
                    );
#endif
    }

    (void)HaveWeSwitchedToNewLogicRules( fUseOld044Rules );

    if (GetBoolArg("-printblockindex") || GetBoolArg("-printblocktree"))
    {
        PrintBlockTree();
        return false;
    }

    if (mapArgs.count("-printblock"))
    {
        string strMatch = mapArgs["-printblock"];
        int nFound = 0;
        for (map<uint256, CBlockIndex*>::iterator mi = mapBlockIndex.begin(); mi != mapBlockIndex.end(); ++mi)
        {
            uint256 hash = (*mi).first;
            if (strncmp(hash.ToString().c_str(), strMatch.c_str(), strMatch.size()) == 0)
            {
                CBlockIndex* pindex = (*mi).second;
                CBlock block;
                block.ReadFromDisk(pindex);
                block.BuildMerkleTree();
                block.print();
                printf("\n");
                nFound++;
            }
        }
        if (nFound == 0)
            printf("No blocks matching %s were found\n", strMatch.c_str());
        return false;
    }


    if (fFirstRun)
    {
        // Create new keyUser and set as default key
        RandAddSeedPerfmon();

        CPubKey newDefaultKey;
        if (!pwalletMain->GetKeyFromPool(newDefaultKey, false))
            strErrors << _("Cannot initialize keypool") << "\n";
        pwalletMain->SetDefaultKey(newDefaultKey);
        if (!pwalletMain->SetAddressBookName(pwalletMain->vchDefaultKey.GetID(), ""))
            strErrors << _("Cannot write default address") << "\n";
    }

    printf("%s", strErrors.str().c_str());
    printf(" wallet      %15" PRId64 "ms\n", GetTimeMillis() - nStart);

    RegisterWallet(pwalletMain);

    CBlockIndex *pindexRescan = pindexBest;
    if (GetBoolArg("-rescan"))
        pindexRescan = pindexGenesisBlock;
    else
    {
        CWalletDB walletdb(strWalletFileName);
        CBlockLocator locator;
        if (walletdb.ReadBestBlock(locator))
            pindexRescan = locator.GetBlockIndex();
    }
    if (pindexBest != pindexRescan && pindexBest && pindexRescan && pindexBest->nHeight > pindexRescan->nHeight)
    {
        uiInterface.InitMessage(_("<b>Please wait, rescanning blocks...</b>"));
        printf("Rescanning last %i blocks (from block %i)...\n", pindexBest->nHeight - pindexRescan->nHeight, pindexRescan->nHeight);
        nStart = GetTimeMillis();
#ifdef WIN32
        int
            nNumberOfTxs = 0;

        nNumberOfTxs = pwalletMain->ScanForWalletTransactions(
                                        pindexRescan, 
                                        true,   // will modify Tx's in wallet
                                        pindexBest->nHeight - pindexRescan->nHeight
                                                             );
#else
        pwalletMain->ScanForWalletTransactions(pindexRescan, true);
#endif
        printf(" rescan      %15" PRId64 "ms\n", GetTimeMillis() - nStart);
    }

    // ********************************************************* Step 9: import blocks

    if (mapArgs.count("-loadblock"))
    {
        uiInterface.InitMessage(_("<b>Importing blockchain data file.</b>"));

        BOOST_FOREACH(string strFile, mapMultiArgs["-loadblock"])
        {
            FILE *file = fopen(strFile.c_str(), "rb");
            if (file)
                LoadExternalBlockFile(file);
        }
        StartShutdown();
    }

    filesystem::path pathBootstrap = GetDataDir() / "bootstrap.dat";
    if (filesystem::exists(pathBootstrap)) {
        uiInterface.InitMessage(_("<b>Importing bootstrap blockchain data file.</b>"));

        FILE *file = fopen(pathBootstrap.string().c_str(), "rb");
        if (file) {
            filesystem::path pathBootstrapOld = GetDataDir() / "bootstrap.dat.old";
            LoadExternalBlockFile(file);
            RenameOver(pathBootstrap, pathBootstrapOld);
        }
    }

    // ********************************************************* Step 10: load peers

    uiInterface.InitMessage(_("<b>Loading addresses...</b>"));
    printf("Loading addresses...\n");
    nStart = GetTimeMillis();

    {
        CAddrDB adb;    // does a GetDataDir() in ctor for "peers.dat"
        if (!adb.Read(addrman))
            printf("Invalid or missing peers.dat; recreating\n");
    }

    printf("Loaded %i addresses from peers.dat  %" PRId64 "ms\n",
           addrman.size(), GetTimeMillis() - nStart);

    // ********************************************************* Step 11: start node

    if (!CheckDiskSpace())
        return false;

    if( fDebug )
    {
#ifdef WIN32
        (void)printf(
                    "physical mem available = %llu"
                    "\n"
                    , getTotalSystemMemory()
                    );
#endif
    }

    RandAddSeedPerfmon();

    //// debug print
    printf("mapBlockIndex.size() = %" PRIszu "\n",   mapBlockIndex.size());
    printf("nBestHeight = %d\n",                     nBestHeight);
    printf("setKeyPool.size() = %" PRIszu "\n",      pwalletMain->setKeyPool.size());
    printf("mapWallet.size() = %" PRIszu " transactions\n",       pwalletMain->mapWallet.size());
    printf("mapAddressBook.size() = %" PRIszu "\n",  pwalletMain->mapAddressBook.size());


    if (!NewThread(StartNode, NULL))
        InitError(_("Error: could not start node"));

    if (fServer)
        NewThread(ThreadRPCServer, NULL);

    // ********************************************************* Step 12: finished

    uiInterface.InitMessage(_("<b>Done loading</b>"));
    printf("Done loading\n");

    if (!strErrors.str().empty())
        return InitError(strErrors.str());

    //Yassert( false );   //test
#ifdef _MSC_VER
    #ifdef _DEBUG
        printf("\a" );    // just to call me back after a long debug startup!
    #endif
#endif
     // Add wallet transactions that aren't already in a block to mapTransactions
    pwalletMain->ReacceptWalletTransactions();

#if !defined(QT_GUI)
    // Loop until process is exit()ed from shutdown() function,
    // called from ThreadRPCServer thread when a "stop" command is received.
    while (1)
    {
        Sleep(5 * 1000);
        if(fExit)
            break;
    }
#endif
    return true;
}
#ifdef _MSC_VER
    #include "msvc_warnings.pop.h"
#endif
