# Copyright (c) 2009-2010 Satoshi Nakamoto
# Copyright (c) 2020 the Yacoin gangstas :)
# Distributed under the MIT/X11 software license, see the accompanying
# file COPYING or http://www.opensource.org/licenses/mit-license.php.
#
# NOTE: there are no explicit paths, all paths are relative to the .../src 
# directory.
#
# I added some output after the link to show 
# the object files, since they may change (shouldn't in this build, but will 
# in the Qt build!), 
# the DEFS, in order to see what options were set into defines, 
# INCLUDEPATHS to see what include directories were used, in case there's a problem,
# LIBPATHS as above, and LIBS to see which libraries were actually linked.

# this file is intened to be invoked via
# mingw32-make -f makefile.mingw 
# in a git-bash shell ala YMake.  Ron

CC ?= g++
CXX ?= g++

scryptFiles := $(wildcard scrypt*.*)

###############################################################################
#UPnP configuration
#
# choose either
USE_UPNP:=1
#or 
#USE_UPNP:=-
###############################################################################

###############################################################################
#IPV6 configuration
#
# choose either
USE_IPV6:=1
#or 
#USE_IPV6:=-
###############################################################################

###############################################################################
# USE_ASM configuration
# this REQUIRES object file deletions unless you know exactly what you built 
# last!  Or you cna waste time and do a clean first!
# the files that need rebuilding are always scrypt.o, and usually(!) 
# scrypt-generic.o, scrypt-arm.o, scrypt-x86.o, & scrypt-x86_64.o
# The best would be to delete/remove the .o files or touch the .cpp & .S files
# when switchiing from 
# USE_ASM 1 to 0 or vv so that make recompiles them!  
# How do you do that with a 'touch' perhaps, someone?
# or using --assume-new = $(scryptFiles) somehow?
#

# choose either
USE_ASM:=1
#or no USE_ASM
###############################################################################

###############################################################################
# USE_LEVELDB configuration
# this REQUIRES file additions or removals from the source file list
#
# choose either
USE_LEVELDB:=1
#or no USE_LEVELDB
###############################################################################

BOOST_SUFFIX?=-mgw48-mt-sd-1_55

INCLUDEPATHS= \
-I"$(CURDIR)" \
-I"$(CURDIR)/scrypt-jane" \
-I'./leveldb/include' \
-I'./leveldb/helpers' \
-I'../../../sw/boost_1_58_0/include' \
-I'../../../sw/db-4.8.30.NC/include' \
-I'../../../sw/openssl-1.0.1u/include' \
-I'../../../sw/miniupnpc-1.9.20150206/include' \
-I'../../../sw/qrencode-3.4.4/include'

LIBPATHS= \
-L'../../../sw/boost_1_58_0/lib' \
-L'../../../sw/db-4.8.30.NC/lib' \
-L'../../../sw/openssl-1.0.1u/lib' \
-L'leveldb' \
-L'../../../sw/miniupnpc-1.9.20150206/lib' \
-L'../../../sw/qrencode-3.4.4/lib'

LIBS= \
-lmingw32 \
-Wl,-Bstatic \
-lqrencode \
-liphlpapi \
-lleveldb \
-lmemenv \
-lssl \
-lcrypto \
-ldb_cxx \
-lboost_system \
-lboost_filesystem \
-lboost_program_options \
-lboost_thread \
-lboost_chrono \
-Wl,-Bstatic \
-lpthread \
-lminiupnpc \
-lshlwapi

# -l boost_system$(BOOST_SUFFIX) \
# -l boost_filesystem$(BOOST_SUFFIX) \
# -l boost_program_options$(BOOST_SUFFIX) \
# -l boost_thread$(BOOST_SUFFIX) \
# -l boost_chrono$(BOOST_SUFFIX) \
# -l db_cxx \
# -l ssl \
# -l crypto
#

DEFS= \
-D__STDC_FORMAT_MACROS \
-DWIN32 \
-D_WINDOWS                              \
-DYac1dot0 \
-DSTATICLIB \
-DMINIUPNP_STATICLIB \
-DBOOST_THREAD_USE_LIB \
-DBOOST_SPIRIT_THREADSAFE \
-DSCRYPT_CHACHA \
-DSCRYPT_KECCAK512 \
-DSCRYPT_CHOOSE_COMPILETIME \
-DO2

# choose
#	-g
# or
#   -DNDEBUG
DEBUGFLAGS=\
-DNDEBUG

CFLAGS= \
-mthreads \
-O2 \
-msse2 \
-w \
-Wall \
-Wextra \
-Wformat \
-Wformat-security \
-Wno-unused-parameter \
$(DEBUGFLAGS) \
$(DEFS)

#$(INCLUDEPATHS)

LDFLAGS= \
-Wl,--dynamicbase \
-Wl,--nxcompat \
-Wl,--large-address-aware \
-static

TESTDEFS = -DTEST_DATA_DIR=$(abspath test/data)

all: yacoind.exe

######################
########### plug and play stuff
ifneq (${USE_UPNP}, -)
 DEFS += -DUSE_UPNP
endif
######################

######################
########### IPV6 stuff
ifneq (${USE_IPV6}, -)
 DEFS += -DUSE_IPV6
endif
######################

######################
########### USE_ASM stuff
ifdef USE_ASM
 DEFS += -DUSE_ASM
else
endif
######################

######################
#
# LevelDB support, with mingw shlwapi lib must come at the end! (Why?)
#
ifdef USE_LEVELDB
DEFS += -DUSE_LEVELDB
#leveldb/libleveldb.a:
#	cd leveldb; TARGET_OS=NATIVE_WINDOWS make libleveldb.a libmemenv.a; cd ..
#obj/txdb-leveldb.o	: txdb-leveldb.cpp
#	g++ -c $(CFLAGS) -MMD -o $@ $<
#	@echo TEST LEVELDB $(DEFS)
else
obj/txdb-bdb.o	: txdb-bdb.cpp
	$(CC) -c $(CFLAGS) -MMD -o $@ $<
endif
######################

LIBS += \
-l kernel32 \
-l user32 \
-l gdi32 \
-l comdlg32 \
-l winspool \
-l winmm \
-l shell32 \
-l comctl32 \
-l ole32 \
-l oleaut32 \
-l uuid \
-l rpcrt4 \
-l advapi32 \
-l ws2_32 \
-l mswsock \
-l iphlpapi \
-l shlwapi

# TODO: make the mingw builds smarter about dependencies, like the linux/osx builds are
HEADERS = $(wildcard *.h)

OBJS= \
obj/alert.o \
obj/addrman.o \
obj/bitcoinrpc.o \
obj/checkpoints.o \
obj/crypter.o \
obj/db.o \
obj/init.o \
obj/irc.o \
obj/json_spirit_reader.o \
obj/json_spirit_value.o \
obj/kernel.o \
obj/key.o \
obj/keystore.o \
obj/main.o \
obj/miner.o \
obj/net.o \
obj/netbase.o \
obj/noui.o \
obj/pbkdf2.o \
obj/price.o \
obj/protocol.o \
obj/random_nonce.o \
obj/rpcblockchain.o \
obj/rpcdump.o \
obj/rpcmining.o \
obj/rpcnet.o \
obj/rpcrawtransaction.o \
obj/rpcwallet.o \
obj/script.o \
obj/scrypt.o \
obj/scrypt-arm.o \
obj/scrypt-x86.o \
obj/scrypt-x86_64.o \
obj/scrypt-generic.o \
obj/scrypt-jane.o \
obj/stun.o \
obj/sync.o \
obj/txdb-bdb.o \
obj/txdb-leveldb.o \
obj/util.o \
obj/version.o \
obj/wallet.o \
obj/walletdb.o

test check: test_yacoin.exe FORCE
	test_yacoin.exe

#.genjane:
#	touch .genjane; gcc -c -O3 -DSCRYPT_CHACHA -DSCRYPT_KECCAK512 -DSCRYPT_CHOOSE_COMPILETIME -o obj/scrypt-jane.o scrypt-jane/scrypt-jane.c

obj/scrypt-jane.o: scrypt-jane/scrypt-jane.c
	$(CXX) -c -frandom-seed=$@ $(CFLAGS) $(INCLUDEPATHS) -MMD -o $@ $<

obj/json_spirit_value.o: json/json_spirit_value.cpp
	$(CXX) -c -frandom-seed=$@ $(CFLAGS) $(INCLUDEPATHS) -MMD -o $@ $<

obj/json_spirit_reader.o: json/json_spirit_reader.cpp
	$(CXX) -c -frandom-seed=$@ $(CFLAGS) $(INCLUDEPATHS) -MMD -o $@ $<

obj/scrypt-x86_64.o : scrypt-x86_64.S
	$(CXX) -c -frandom-seed=$@ $(CFLAGS) $(INCLUDEPATHS) -MMD -o $@ $<

obj/scrypt-x86.o : scrypt-x86.S
	$(CXX) -c -frandom-seed=$@ $(CFLAGS) $(INCLUDEPATHS) -MMD -o $@ $<

obj/scrypt-arm.o : scrypt-arm.S
	$(CXX) -c -frandom-seed=$@ $(CFLAGS) $(INCLUDEPATHS) -MMD -o $@ $<	

obj/%.o: %.cpp $(HEADERS)
	$(CXX) -c -frandom-seed=$@ $(CFLAGS) $(INCLUDEPATHS) -o $@ $<

yacoind.exe: $(OBJS:obj/%=obj/%)
	$(CXX) $(CFLAGS) $(LDFLAGS) -o $@ $(LIBPATHS) $^ $(LIBS) -s
	@echo	
	@echo $(OBJS)
	@echo
	@echo $(DEFS)
	@echo	
	@echo $(INCLUDEPATHS)
	@echo	
	@echo $(LIBPATHS)
	@echo	
	@echo $(LIBS)
	@echo	
	@echo $(scryptFiles)

TESTOBJS := $(patsubst test/%.cpp,obj-test/%.o,$(wildcard test/*.cpp))

obj-test/%.o: test/%.cpp $(HEADERS)
	g++ -c $(TESTDEFS) $(CFLAGS) -o $@ $<

test_yacoin.exe: $(TESTOBJS) $(filter-out obj/init.o,$(OBJS:obj/%=obj/%))
	g++ $(CFLAGS) $(LDFLAGS) -o $@ $(LIBPATHS) $^ -lboost_unit_test_framework$(BOOST_SUFFIX) $(LIBS)

clean:
	rm -f obj/*.d
	rm -f obj/*.o
	rm -f yacoind
	rm -f obj-test/*.*
	rm -f test_yacoin

FORCE: